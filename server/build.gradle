buildscript {
    ext {
        springBootVersion = '2.5.6'
        querydslPluginVersion = '1.0.10'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenCentral()
}

subprojects {
    group 'com.momo'
    version '1.0'

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport' //테스트를 완료한 뒤에 리포트를 생성하도록 설정
    }

    /**
     * jacoco 설정
     */
    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled false
            csv.enabled false
        }

        def Qdomains = []
        for (qPattern in '**/QA'..'**/QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }

        // 리포트에서 제외할 클래스들
        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [] + Qdomains)
                    })
            )
        }

        finalizedBy 'jacocoTestCoverageVerification' // 테스트 커버리지를 확인한 후에 리포트를 생성하도록 설정
    }

    jacocoTestCoverageVerification {
        def Qdomains = []

        for (qPattern in '*.QA'..'*.QZ') {
            Qdomains.add(qPattern + '*')
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.70
                }

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }

                // 테스트 커버리지 체크를 제외할 클래스들
                excludes = [
                        // momo-api
                        'com.momo.MomoApplication', 'com.momo.common.GlobalExceptionHandler',
                        // momo-core
                        'com.momo.init.*', 'com.momo.domain.auth.*', 'com.momo.domain.aws.*',
                        'com.momo.config.*', 'com.momo.domain.common.exception.*'
                ] + Qdomains
            }
        }
    }
}
